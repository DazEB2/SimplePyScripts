#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = "ipetrash"


from dataclasses import dataclass, field
from typing import Optional


@dataclass
class TreeNode:
    name: str
    is_last: bool = False
    parent: 'TreeNode' = field(default=None, repr=False)
    children: list['TreeNode'] = field(default_factory=list, init=False, repr=False)

    def is_finished(self) -> bool:
        if self.is_last:
            return True

        if not self.children:
            return False

        return all(node.is_finished() for node in self.children)

    def add_child(self, name: str, is_last: bool = False) -> 'TreeNode':
        if node := self.get_child([name]):
            return node

        if self.is_last:
            raise Exception("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–∑–µ–ª")

        node = TreeNode(name=name, is_last=is_last, parent=self)
        self.children.append(node)
        return node

    def get_child(self, names: list[str], children: list['TreeNode'] = None) -> Optional['TreeNode']:
        if children is None:
            children = self.children

        name = names[0]
        for node in children:
            if node.name == name:
                if len(names) == 1:
                    return node

                return self.get_child(names[1:], node.children)

    def get_full_name(self, sep: str = " >> ") -> str:
        names: list[str] = [self.name]

        parent = self.parent
        while parent and parent.name:
            names.append(parent.name)
            parent = parent.parent

        names.reverse()
        return sep.join(names)

    def print(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª
        if self.name:
            print(self.get_full_name())

        for child in self.children:
            child.print()


@dataclass
class Tree:
    root_node: TreeNode = TreeNode(name="")

    def add_child(self, name: str, is_last: bool = False) -> TreeNode:
        return self.root_node.add_child(name=name, is_last=is_last)

    def get_child(self, names: list[str]) -> TreeNode | None:
        return self.root_node.get_child(names=names)

    def print(self):
        self.root_node.print()


def get_path_of_classes(path: str) -> list[str]:
    return [x.strip()[1:-1] for x in path.split("->")]



if __name__ == "__main__":
    path_of_classes = "[üó°Ô∏è –í–æ–∏–Ω]->[‚öîÔ∏è –†—ã—Ü–∞—Ä—å]->[üõ°Ô∏è–§–µ–æ–¥–∞–ª]->[üëë –ö–æ—Ä–æ–ª—å]"
    assert get_path_of_classes(path_of_classes) == ["üó°Ô∏è –í–æ–∏–Ω", "‚öîÔ∏è –†—ã—Ü–∞—Ä—å", "üõ°Ô∏è–§–µ–æ–¥–∞–ª", "üëë –ö–æ—Ä–æ–ª—å"]

    assert get_path_of_classes("[üó°Ô∏è –í–æ–∏–Ω]") == ["üó°Ô∏è –í–æ–∏–Ω"]

    tree = Tree()

    node_1 = tree.add_child("–í–æ–∏–Ω")
    assert node_1 == tree.add_child("–í–æ–∏–Ω")
    assert node_1.get_full_name() == "–í–æ–∏–Ω"
    assert not node_1.is_finished()

    node_1_1 = node_1.add_child("–†—ã—Ü–∞—Ä—å")
    assert node_1_1 == node_1.add_child("–†—ã—Ü–∞—Ä—å")
    assert node_1_1.get_full_name() == "–í–æ–∏–Ω >> –†—ã—Ü–∞—Ä—å"
    assert not node_1_1.is_finished()

    node_1_1_1 = node_1_1.add_child("–§–µ–æ–¥–∞–ª")
    assert not node_1_1_1.is_finished()

    node_1_1_1_1 = node_1_1_1.add_child("–ö–æ—Ä–æ–ª—å", is_last=True)
    assert node_1_1_1_1.get_full_name() == "–í–æ–∏–Ω >> –†—ã—Ü–∞—Ä—å >> –§–µ–æ–¥–∞–ª >> –ö–æ—Ä–æ–ª—å"
    assert node_1.is_finished()
    assert node_1_1.is_finished()
    assert node_1_1_1.is_finished()
    assert node_1_1_1_1.is_finished()

    assert node_1 == tree.get_child(["–í–æ–∏–Ω"])
    assert node_1_1_1 == tree.get_child(["–í–æ–∏–Ω", "–†—ã—Ü–∞—Ä—å", "–§–µ–æ–¥–∞–ª"])
    assert node_1_1_1_1 == tree.get_child(["–í–æ–∏–Ω", "–†—ã—Ü–∞—Ä—å", "–§–µ–æ–¥–∞–ª", "–ö–æ—Ä–æ–ª—å"])
    assert tree.get_child(["–í–æ–∏–Ω", "–ö–æ—Ä–æ–ª—å"]) is None

    node_1_2 = node_1.add_child("–ù–∞–µ–º–Ω–∏–∫")
    assert not node_1.is_finished()
    assert not node_1_2.is_finished()

    node_1_2_1 = node_1_2.add_child("–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç")
    node_1_2_1_1 = node_1_2_1.add_child("–ì–ª–∞–≤–∞ –≥–∏–ª—å–¥–∏–∏", is_last=True)
    assert node_1.is_finished()
    assert node_1_2_1_1.is_finished()

    node_1_2_2 = node_1_2.add_child("–†–∞–∑–±–æ–π–Ω–∏–∫")
    node_1_2_2_1 = node_1_2_2.add_child("–§–µ–æ–¥–∞–ª", is_last=True)

    node_1_2_3 = node_1_2.add_child("–°–ª–µ–¥–æ–ø—ã—Ç")

    node_2 = tree.add_child("–Æ–Ω—ã–π –¥–∞–æ—Å")

    node_2_1 = node_2.add_child("–®–∫–æ–ª–∞ –∑–µ–±—Ä—ã")
    node_2_1_1 = node_2_1.add_child("–î—É—Ö–æ–≤–Ω—ã–π –≤–ª–∞–¥—ã–∫–∞")
    node_2_1_1_1 = node_2_1_1.add_child("–í–µ—Ä—Ö–æ–≤–Ω—ã–π –¥–∞–æ—Å", is_last=True)
    assert node_2_1_1_1.get_full_name() == "–Æ–Ω—ã–π –¥–∞–æ—Å >> –®–∫–æ–ª–∞ –∑–µ–±—Ä—ã >> –î—É—Ö–æ–≤–Ω—ã–π –≤–ª–∞–¥—ã–∫–∞ >> –í–µ—Ä—Ö–æ–≤–Ω—ã–π –¥–∞–æ—Å"

    node_2_2 = node_2.add_child("–®–∫–æ–ª–∞ —Ç–∏–≥—Ä–∞")
    node_2_2_1 = node_2_2.add_child("–°–∫–∞–ª–∞")
    node_2_2_1_1 = node_2_2_1.add_child("–í—ã—Å—à–∏–π –∫—É–ª—å—Ç–∏–≤–∞—Ç–æ—Ä", is_last=True)
    assert node_2_2_1_1.get_full_name() == "–Æ–Ω—ã–π –¥–∞–æ—Å >> –®–∫–æ–ª–∞ —Ç–∏–≥—Ä–∞ >> –°–∫–∞–ª–∞ >> –í—ã—Å—à–∏–π –∫—É–ª—å—Ç–∏–≤–∞—Ç–æ—Ä"

    tree.print()
    """
    –í–æ–∏–Ω
    –í–æ–∏–Ω >> –†—ã—Ü–∞—Ä—å
    –í–æ–∏–Ω >> –†—ã—Ü–∞—Ä—å >> –§–µ–æ–¥–∞–ª
    –í–æ–∏–Ω >> –†—ã—Ü–∞—Ä—å >> –§–µ–æ–¥–∞–ª >> –ö–æ—Ä–æ–ª—å
    –í–æ–∏–Ω >> –ù–∞–µ–º–Ω–∏–∫
    –í–æ–∏–Ω >> –ù–∞–µ–º–Ω–∏–∫ >> –ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç
    –í–æ–∏–Ω >> –ù–∞–µ–º–Ω–∏–∫ >> –ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç >> –ì–ª–∞–≤–∞ –≥–∏–ª—å–¥–∏–∏
    –í–æ–∏–Ω >> –ù–∞–µ–º–Ω–∏–∫ >> –†–∞–∑–±–æ–π–Ω–∏–∫
    –í–æ–∏–Ω >> –ù–∞–µ–º–Ω–∏–∫ >> –†–∞–∑–±–æ–π–Ω–∏–∫ >> –§–µ–æ–¥–∞–ª
    –í–æ–∏–Ω >> –ù–∞–µ–º–Ω–∏–∫ >> –°–ª–µ–¥–æ–ø—ã—Ç
    –Æ–Ω—ã–π –¥–∞–æ—Å
    –Æ–Ω—ã–π –¥–∞–æ—Å >> –®–∫–æ–ª–∞ –∑–µ–±—Ä—ã
    –Æ–Ω—ã–π –¥–∞–æ—Å >> –®–∫–æ–ª–∞ –∑–µ–±—Ä—ã >> –î—É—Ö–æ–≤–Ω—ã–π –≤–ª–∞–¥—ã–∫–∞
    –Æ–Ω—ã–π –¥–∞–æ—Å >> –®–∫–æ–ª–∞ –∑–µ–±—Ä—ã >> –î—É—Ö–æ–≤–Ω—ã–π –≤–ª–∞–¥—ã–∫–∞ >> –í–µ—Ä—Ö–æ–≤–Ω—ã–π –¥–∞–æ—Å
    –Æ–Ω—ã–π –¥–∞–æ—Å >> –®–∫–æ–ª–∞ —Ç–∏–≥—Ä–∞
    –Æ–Ω—ã–π –¥–∞–æ—Å >> –®–∫–æ–ª–∞ —Ç–∏–≥—Ä–∞ >> –°–∫–∞–ª–∞
    –Æ–Ω—ã–π –¥–∞–æ—Å >> –®–∫–æ–ª–∞ —Ç–∏–≥—Ä–∞ >> –°–∫–∞–ª–∞ >> –í—ã—Å—à–∏–π –∫—É–ª—å—Ç–∏–≤–∞—Ç–æ—Ä
    """
